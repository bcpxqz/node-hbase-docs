{"data":{"page":{"html":"<h1 id=\"connection-http-rest-requests-for-hbase\"><a href=\"#connection-http-rest-requests-for-hbase\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connection: HTTP REST requests for HBase</h1>\n<div class=\"toc\">\n<h2><a href=\"#toc\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#creating-a-new-connection\">Creating a new connection</a></li>\n<li><a href=\"#http-get-requests\">HTTP Get requests</a></li>\n</ul>\n</div>\n<p>The connection object handles HTTP requests. You shouldn't have to call it directly because HBase requests are transparently made by the client objects.</p>\n<p>Note, at this point, the HTTP client only communicate to HBase with the JSON format. Some valid requests requests return an empty body which of course not a valid JSON. In such cases, no error is thrown by the response handler but the returned value is null.</p>\n<h2 id=\"creating-a-new-connection\"><a href=\"#creating-a-new-connection\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a new connection</h2>\n<p>The most common way of initializing a new connection object is through the client object. When a new client is constructed, it create and hold a connection object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token function\">hbase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> options <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>connection <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">hbase<span class=\"token punctuation\">.</span>Connection</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can also manually contruct a new instance as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">hbase<span class=\"token punctuation\">.</span>Connection</span><span class=\"token punctuation\">(</span> client <span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"http-get-requests\"><a href=\"#http-get-requests\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Get requests</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">myConnection<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>status<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Execute an HTTP Get request. The callback contains 3 arguments: the error object if any, the decoded response body and the Node <code class=\"language-text\">http.ClientResponse</code> object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Connection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Status code: '</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Number of tables: '</span> <span class=\"token operator\">+</span> tables<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Connection","description":"HTTP REST requests for HBase","keywords":"connection, rest, api, http, rest"},"fields":{"edit_url":"https://github.com/adaltas/node-hbase-docs/edit/master/src/md/api/connection.md"}}},"pageContext":{}}